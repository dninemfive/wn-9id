import ndf_parse as ndf
from message import Message
from ndf_parse import Mod
from ndf_parse.model import List
from typing import Callable, Self, Generator
from dataclasses import dataclass
from script.context.ndf_context import NdfContext
from metadata.ndf_paths import NdfPaths
import mod_creation_context as mcc

def ndf_alias(path: str):
    def decorate(f: Callable[[Self], List]):
        # @wraps doesn't understand self (afaict) so using it here is counterproductive
        def wrap(self: Self):
            return self[path]
        return wrap
    return decorate

class UnitNdf(NdfContext):
    def __init__(self: Self, mod: Mod, parent_msg: Message | None = None):
        super(mod,
              parent_msg,
              NdfPaths(rf'GameData\Generated\Gameplay',
                       rf'Gfx\UniteDescriptor',
                       rf'Gfx\ShowRoomEquivalence',
                       rf'Decks\DivisionPacks',
                       rf'Decks\DeckSerializer',
                       rf'Gfx\AllUnitsTactic'))

    @property
    @ndf_alias(rf"Gfx\UniteDescriptor")
    def unite_descriptor(self: Self) -> List:
        pass
    @property
    @ndf_alias(rf"Gfx\ShowRoomEquivalence")
    def showroom_equivalence(self: Self) -> List:
        pass
    @property
    @ndf_alias(rf"Decks\DivisionPacks")
    def division_packs(self: Self) -> List:
        pass
    @property
    @ndf_alias(rf"Decks\DeckSerializer")
    def deck_serializer(self: Self) -> List:
        pass
    @property
    @ndf_alias(rf"Gfx\AllUnitsTactic")
    def all_units_tactic(self: Self) -> List:
        pass

class MultipleUnitCreationContext(object):
    """ 
    Creates a context for editing all the relevant unit files so they don't have to get closed and reopened over and over 
        See https://ulibos.github.io/ndf-parse/v0.2.0/docs.html#edits
    """
    def __init__(self: Self, context: mcc.ModCreationContext, initial_unit_id: int):
        self.context = context
        self.current_unit_id = initial_unit_id

    def __enter__(self: Self):
        self.ndf = UnitNdf(self.context.mod)
        return self
    
    def __exit__(self: Self, exc_type, exc_value, traceback):
        for edit in self.context.mod.edits:
            self.mod.write_edit(edit)
        self.ndf = None

    def load_files(self: Self, base_path: str, *paths: str) -> Generator[List]:
        for path in paths:
            yield self.mod.edit(f'{base_path}\\{path}.ndf').current_tree

    def create_unit(self: Self, unit_name: str, copy_of: str, showroom_equivalent: str | None = None) -> ctx.UnitCreationContext:
        return ctx.UnitCreationContext(self, unit_name, copy_of, showroom_equivalent)